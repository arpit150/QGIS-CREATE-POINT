# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CreatePoint
   A QGIS plugin
 this plugin is create point.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
-------------------
        begin      : 2020-05-22
        git sha    : $Format:%H$
        copyright  : (C) 2020 by arpit srivastava
        email      : arpitvk99@gmail.com
 ***************************************************************************/

/***************************************************************************
 *   *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.     *
 *   *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.core import Qgis, QgsWkbTypes
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
import os.path
from PyQt5.QtWidgets import QDialog,QLabel,QHBoxLayout
from qgis.core import (QgsCoordinateReferenceSystem,QgsCoordinateTransform,QgsProject,QgsRectangle,QgsPointXY,QgsGeometry,QgsVectorLayer,QgsFeature)

from .maptool import Map_Tool

class CreatePoint:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
         which provides the hook by which you can manipulate the QGIS
          application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
        self.plugin_dir,
              'i18n',
              'CreatePoint_{}.qm'.format(locale))

        if os.path.exists(locale_path):
          self.translator = QTranslator()
          self.translator.load(locale_path)
          QCoreApplication.installTranslator(self.translator)

        # Obtaining the map canvas
        self.canvas = iface.mapCanvas()


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Create_Point/icon.png'
        #create action that will be run by the plugin
        self.action = QAction("Create Point", self.iface.mainWindow())
        self.action.setIcon(QIcon(icon_path))
        self.action.setWhatsThis("Create Point")
        self.action.setStatusTip("Click On Map And Draw Point")
        
        # add plugin menu to Vector toolbar
        self.iface.addPluginToMenu("Create_Point",self.action)
        
        # add icon to new menu item in Vector toolbar
        self.iface.addToolBarIcon(self.action)

        # connect action to the run method
        self.action.triggered.connect(self.run)

        # prepare map tool
        self.mapTool = Map_Tool(self.iface)
        #self.iface.mapCanvas().mapToolSet.connect(self.mapToolChanged)


    def unload(self):
        """Actions to run when the plugin is unloaded"""
        # remove menu and icon from the menu
        self.iface.removeToolBarIcon(self.action)
        self.iface.removePluginMenu("Create_Point",self.action)

        if self.iface.mapCanvas().mapTool() == self.mapTool:
           self.iface.mapCanvas().unsetMapTool(self.mapTool)
        del self.mapTool
        

    def run(self):
         #Check Active Layer Present Or Not
         self.active_point_layer = self.iface.mapCanvas().currentLayer()
         if not self.active_point_layer:
           self.iface.messageBar().pushMessage("Active Layer", "No Active Layer Found Please Select Point Layer", level=Qgis.Warning)
         else:
           self.layer_type = self.active_point_layer.geometryType()
           if self.layer_type == QgsWkbTypes.PointGeometry:
             self.iface.mapCanvas().setMapTool(self.mapTool)
           else:
             self.iface.messageBar().pushMessage("Active Layer", "Active Layer Is Not Point Type Layer Please Select Point Layer", level=Qgis.Warning)

